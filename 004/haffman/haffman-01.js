// Haffman

let inputString = '';

// INPUT
process.stdin.on('data', (data) => {
  inputString += data;
  main();
});

// ESCAPE
process.on('SIGINT', () => {
  process.exit();
});

/**
 * –†–∞—Å—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏, –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 *
 * @param {bigint} begin
 * @param {bigint} end
 */
const timeDiff = (begin, end) => (end - begin) / 1000000n;

/**
 * Main!
 */
const main = () => {
  // BEGIN TIME
  const begin = process.hrtime.bigint();

  let queue = new Map();

  // CALCULATIONS
  // STEP 1
  for (let idx = 0; idx < inputString.length; idx++) {
    if (inputString[idx] === '\n') {
      continue;
    }

    if (queue.has(inputString[idx])) {
      queue.set(inputString[idx], {
        frequency: (queue.get(inputString[idx])?.frequency ?? 0) + 1,
        char: inputString[idx],
      });
    } else {
      queue.set(inputString[idx], {
        frequency: 1,
        char: inputString[idx],
      });
    }
  }

  // STEP 2
  let frequencies = [];

  queue.forEach((v) => {
    const { frequency, char } = v;
    frequencies.push({ frequency, char });
  });
  frequencies.sort((a, b) => b.frequency - a.frequency);

  // STEP 3
  let queueWithChildrens = [...frequencies];

  while (queueWithChildrens.length > 1) {
    const i = queueWithChildrens.pop();
    const j = queueWithChildrens.pop();

    queueWithChildrens.push({
      frequency: i.frequency + j.frequency,
      char: [i.char, j.char],
    });
  }

  const tree = {
    length: queueWithChildrens[0].frequency,
    path: queueWithChildrens[0].char,
  };

  // TODO: –ù–∞–ø–∏—Å–∞—Ç—å —à–∞–≥ —Å –ø–∞—Ä—Å–∏–Ω–æ–≥–æ–º –¥–µ—Ä–µ–≤–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞ –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–∞—è:
  // tree { length: 12, path: [ [ [Array], 'b' ], 'a' ] }
  // IDEA: –°–æ–≥–ª–∞—Å–Ω–æ https://neerc.ifmo.ru/wiki/index.php?title=%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%A5%D0%B0%D1%84%D1%84%D0%BC%D0%B0%D0%BD%D0%B0
  // NB: –î–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Å–∞–º–æ–π —á–∞—Å—Ç–æ–π –±—É–∫–≤—ã –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É –º–∞—Å—Å–∏–≤–∞), –∫–æ–¥ –≤—Å–µ–≥–¥–∞ = 0
  // –ï—Å–ª–∏ –Ω–∞ 0 –∏–Ω–¥–µ–∫—Å–µ –º–∞—Å—Å–∏–≤–∞, —Ç–æ –≤ –ø—É—Ç—å –¥–æ–±–∞–≤–ª—è–µ–º 1
  // –ï—Å–ª–∏ –Ω–∞ 1 –∏–Ω–¥–µ–∫—Å–µ –º–∞—Å—Å–∏–≤–∞, —Ç–æ –≤ –ø—É—Ç—å –¥–æ–±–∞–≤–ª—è–µ–º 0

  // OUTPUT
  // FIXME: –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–∏—Ç—å
  console.log('üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ');
  console.log(
    'üöÄ ~ file: haffman-01.js ~ line 45 ~ main ~ frequencies',
    frequencies,
  );
  console.log('üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ');
  console.log('üöÄ ~ file: haffman-01.js ~ line 45 ~ main ~ tree', tree);
  console.log('üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ');
  console.log(
    'üöÄ ~ file: haffman-01.js ~ line 45 ~ main ~ inputString.length - 1',
    inputString.length - 1,
  );

  // TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∏—Ç–æ–≥–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
  // process.stdout.write(String(listM.length));
  // process.stdout.write('\n');
  // let listOutput = listM.reduce((acc, item) => `${acc} ${item}`, '').trim();
  // process.stdout.write(String(listOutput));

  // END TIME
  const end = process.hrtime.bigint();

  // DEBUG OUTPUT
  console.log('\n');
  console.log('–í—Ä–µ–º—è:', timeDiff(begin, end), ' ms.');

  // EXIT
  process.exit();
};
